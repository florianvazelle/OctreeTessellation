#version 450 core

#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

/* Structures */

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  float tessLevel;
};

struct AABB {
  float radius;
  vec3 center;
};

struct Octree {
  AABB bound;
};

/* Variables */

layout(std430, binding = 0) buffer VertexBuffer { Vertex u_VertexBuffer[]; };

uniform vec3 u_impact;

// const variable
const int maxDepth = 8;

/* Functions */

bool IsInsideAABB(AABB bound, vec3 point) {
  float minx = bound.center.x - bound.radius;
  float maxx = bound.center.x + bound.radius;

  float miny = bound.center.y - bound.radius;
  float maxy = bound.center.y + bound.radius;

  float minz = bound.center.z - bound.radius;
  float maxz = bound.center.z + bound.radius;

  return ((minx <= point.x && point.x <= maxx) && (miny <= point.y && point.y <= maxy) && (minz <= point.z && point.z <= maxz));
}

AABB ComputeAABB(AABB bound, int i) {
  vec3 boundOffsetTable[8] = {{-0.5, -0.5, -0.5}, {+0.5, -0.5, -0.5}, {-0.5, +0.5, -0.5}, {+0.5, +0.5, -0.5}, {-0.5, -0.5, +0.5}, {+0.5, -0.5, +0.5}, {-0.5, +0.5, +0.5}, {+0.5, +0.5, +0.5}};

  vec3 offset = boundOffsetTable[i] * bound.radius;

  return AABB(bound.radius * 0.5, bound.center + offset);
}

int DetermineLOD(vec3 currentPoint, vec3 impact) {
  int depth = 0;
  Octree self = Octree(AABB(2, vec3(0, 0, 0)));

  while (true) {
    if (depth >= maxDepth) break;  // la profondeur maximum a été atteinte, on peut s'arrêter

    depth += 1;
    bool found = false;
    for (int i = 0; i < 8; i++) {
      Octree octree = Octree(ComputeAABB(self.bound, i));
      if (IsInsideAABB(octree.bound, impact) && IsInsideAABB(octree.bound, currentPoint)) {
        self = octree;
        found = true;
        break;
      }
    }

    if (!found) break; // aucun des fils du noeud courant ne possède les deux points, on peut s'arrêter
  }

  return depth;
}

void main() {
  uint gid = gl_GlobalInvocationID.x;

 u_VertexBuffer[gid].tessLevel = DetermineLOD(u_VertexBuffer[gid].position, u_impact);
}